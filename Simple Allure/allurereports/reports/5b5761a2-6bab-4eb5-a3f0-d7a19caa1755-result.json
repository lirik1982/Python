{"name": "test_Login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0077F243]\n\t(No symbol) [0x00707FD1]\n\t(No symbol) [0x005FCF10]\n\t(No symbol) [0x006212ED]\n\t(No symbol) [0x0062269D]\n\tGetHandleVerifier [0x00A19A22+2655074]\n\tGetHandleVerifier [0x00A0CA24+2601828]\n\tGetHandleVerifier [0x00828C0A+619850]\n\tGetHandleVerifier [0x00827830+614768]\n\t(No symbol) [0x007105FC]\n\t(No symbol) [0x00715968]\n\t(No symbol) [0x00715A55]\n\t(No symbol) [0x0072051B]\n\tBaseThreadInitThunk [0x75ACFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x770D7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x770D7A6E+238]", "trace": "self = <allurereports.test_orangehrm.TestHRM object at 0x000002D3BB4B5BB0>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_Login(self):\n        self.driver = webdriver.Chrome()\n        self.driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n        time.sleep(5)\n        self.driver.find_element(By.XPATH, \"//*[@id='app']/div[1]/div/div[1]/div/div[2]/div[2]/form/div[1]/div/div[2]/input\").send_keys(\"Admin\")\n        self.driver.find_element(By.XPATH, \"//*[@id='app']/div[1]/div/div[1]/div/div[2]/div[2]/form/div[2]/div/div[2]/input\").send_keys(\"admin123\")\n        self.driver.find_element(By.XPATH, \"//*[@id='app']/div[1]/div/div[1]/div/div[2]/div[2]/form/div[3]/button\").click()\n        act_title = self.driver.title\n        self.driver.close()\n        if act_title == \"OrangeHRM-2\":\n             assert True\n        else:\n>           allure.attach(self.driver.get_screenshot_as_png(), name=\"testLoginScreen\", type=\"png\")\n\nallurereports\\test_orangehrm.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:965: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:977: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002D3BB518250>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"Backtrac...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x770D7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x770D7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0077F243]\nE       \t(No symbol) [0x00707FD1]\nE       \t(No symbol) [0x005FCF10]\nE       \t(No symbol) [0x006212ED]\nE       \t(No symbol) [0x0062269D]\nE       \tGetHandleVerifier [0x00A19A22+2655074]\nE       \tGetHandleVerifier [0x00A0CA24+2601828]\nE       \tGetHandleVerifier [0x00828C0A+619850]\nE       \tGetHandleVerifier [0x00827830+614768]\nE       \t(No symbol) [0x007105FC]\nE       \t(No symbol) [0x00715968]\nE       \t(No symbol) [0x00715A55]\nE       \t(No symbol) [0x0072051B]\nE       \tBaseThreadInitThunk [0x75ACFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x770D7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x770D7A6E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: InvalidSessionIdException"}, "start": 1673803981895, "stop": 1673804010118, "uuid": "d6efd7fc-84b6-45ef-84f8-bf05c8a9c669", "historyId": "ea5c50589af3c8ad79ce11db824209f1", "testCaseId": "13196d0b5a034d4caec0c46a3319d20a", "fullName": "allurereports.test_orangehrm.TestHRM#test_Login", "labels": [{"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "allurereports"}, {"name": "suite", "value": "test_orangehrm"}, {"name": "subSuite", "value": "TestHRM"}, {"name": "host", "value": "WIN-85EVSPG3HLA"}, {"name": "thread", "value": "25796-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "allurereports.test_orangehrm"}]}